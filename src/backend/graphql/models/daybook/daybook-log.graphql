# models
type DaybookLog {
    id: ID!
    daybook_id: Int!
    daybook_date_id: Int!
    title: String
    log: String
    daybook_date: DaybookDate @belongsTo(relation: "daybookDate")
    history_count: Int! @count(relation: "history")
    created_at_time: String!

    created_at: DateTime!
    updated_at: DateTime!
}

type DaybookDate {
    id: ID!
    daybook_id: Int!
    target_date: Date!
    logs: [DaybookLog] @hasMany
    last_log: DaybookLog @hasOne(relation: "lastLog")
    logs_count: Int! @count(relation: "logs")

    created_at: DateTime!
    updated_at: DateTime!
}

extend type Query {
    # Check daybook date exists
    daybookDate(
        where: _ @whereConditions(columns: ["daybook_id", "target_date"])
    ): DaybookDate @first(model: "Day\\Daybook\\DaybookDate")
}

extend type Mutation {
    # new date
    createDaybookDate(input: DaybookDateInput @spread): DaybookDate! @create(model: "Day\\Daybook\\DaybookDate")

    # new log
    createDaybookDateLog(input: CreateDaybookLogInput @spread): DaybookLog! @create(model: "Day\\Daybook\\DaybookLog")

    # update log
    updateDaybookDateLog(input: UpdateDaybookLogInput @spread): DaybookLog! @update(model: "Day\\Daybook\\DaybookLog")
}

# Date inputs
input DaybookDateInput {
    daybook_id: Int!
    target_date: String
}

input CreateDaybookLogInput {
    daybook_id: Int! @rules(apply: ["required"])
    daybook_date_id: Int! @rules(apply: ["required"])
    title: String
    log: String
}

input UpdateDaybookLogInput {
    id: ID!
    title: String
    log: String
}

# Date inputs
input CreateDaybookDateInput {
    daybook_id: ID!
    target_date: Date!
}

input WhereDaybookDateInput {
    daybook_id: ID!
    target_date: Date!
}
