"Base Entity"
type Daybook {
    id: ID!
    title: String!
    description: String
    icon: String
    color: String
    archive: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
    logs: [DaybookLog!] @hasMany
    logs_count: Int! @count(relation: "logs")
    dates: [DaybookDate] @hasMany
}

extend type Query {
    "Retrieve paginated items"
    daybooks (
        orderBy: _ @orderBy(columns: ["created_at", "title"])
    ): [Daybook] @paginate(type: PAGINATOR, defaultCount: 10, maxCount: 50, model: "Day\\Daybook\\Daybook")

    "Retrieve requested item"
    daybook (id: ID! @eq): Daybook @find(model: "Day\\Daybook\\Daybook")
}

extend type Mutation {
    # new book
    createDaybook(input: CreateDaybookInput! @spread): Daybook! @create(model: "Day\\Daybook\\Daybook")

    # update book
    updateDaybook(input: UpdateDaybookInput! @spread): Daybook! @update(model: "Day\\Daybook\\Daybook")
}

input CreateDaybookInput {
    title: String @rules(apply: ["required", "min:2", "max:100"])
    description: String @rules(apply: ["nullable", "max:1000"])
    icon: String @rules(apply: ["max:50"])
    color: String @rules(apply: ["max:10"])
}

input UpdateDaybookInput {
    id: ID!
    title: String @rules(apply: ["required", "min:2", "max:100"])
    description: String @rules(apply: ["nullable", "max:1000"])
    icon: String @rules(apply: ["max:50"])
    color: String @rules(apply: ["max:10"])
}
